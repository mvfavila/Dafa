@model DAFA.Application.ViewModels.FieldViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Field</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @data_bind = "value: FieldName" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <h4>Events</h4>

        <table id="events" class="table">
            <thead>
                <tr><th>Name</th><th>Description</th><th>Date</th><th>Type</th><th></th></tr>
            </thead>
            <tbody data-bind="foreach: Events">
                <tr class="clickable-row">
                    <td><input data-bind="value: EventName" class="form-control" /></td>
                    <td><input data-bind="value: EventDescription" class="form-control" /></td>
                    <td><input data-bind="value: EventDate" class="form-control" /></td>
                    <td>
                        <select class="form-control" data-bind="
                           options: $parent.EventTypes,
                           optionsText: 'text',
                           optionsValue: 'value',
                           value: EventType,
                           valueAllowUnset: true"></select>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" data-bind="click: $parent.remove">Remove</button>
                    </td>
                </tr>
            </tbody>
        </table>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addEventModal">Add Event</button>
                <input type="button" value="Save" class="btn btn-default" data-bind="click: save" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@*=============== Modal ==============*@
<div class="modal fade" id="addEventModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Event</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                        @Html.Label("Name", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.Editor("EventName", new { htmlAttributes = new { @id = "event-name", @class = "form-control", @data_bind = "value: EventName" } })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Description", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.Editor("EventDescription", new { htmlAttributes = new { @id = "event-description", @class = "form-control", @data_bind = "value: EventDescription" } })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label("Date", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.Editor("EventDate", new { htmlAttributes = new { @id = "event-date", @class = "form-control", @data_bind = "value: EventDate" } })
                        </div>
                    </div>

                    <div class="form-control">
                        @Html.Label("Type", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <select class="form-control" id="event-type" data-bind="
                               options: $root.EventTypes,
                               optionsText: 'text',
                               optionsValue: 'value',
                               value: EventType,
                               valueAllowUnset: true"></select>
                        </div>
                    </div>
                </form>
                <br/>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" data-bind="click: addEvent">Add Event</button>
            </div>
        </div>
    </div>
</div>
@*=============== Modal ==============*@

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/knockout")

    <script type="text/javascript">

        $('#events').on('click', '.clickable-row', function (event) {
            $(this).addClass('active').siblings().removeClass('active');
        });

        var FieldViewModel = function () {
            var self = this;

            self.FieldName = ko.observable();
            self.Events = ko.observableArray();
            self.EventTypes = [];

            GetField('@Model.FieldId');
            GetEventTypes();

            var field = {
                Name: self.FieldName,
                Events: self.Events
            };

            self.save = function () {
                $.ajax({
                    type: "POST",
                    url: '/Field/Edit',
                    data: ko.toJS(field),
                    dataType: "json",
                    success: function () {
                        alert("Data Saved");
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        alert("some error");
                    }
                });
            };

            self.EventName = "";
            self.EventDescription = "";
            self.EventDate = "";
            self.EventType = "";

            self.addEvent = function () {
                self.Events.push(ko.utils.extend({},
                    new EventObj(self.EventName, self.EventDescription, self.EventDate, self.EventType)));

                // procurar um modo melhor de zerar o objeto conta após a inclusão com sucesso
                $("#event-name").val("");
                $("#event-description").val("");
                $("#event-date").val("");
                $("#event-type").val("");
            };

            self.addEventObj = function (name, description, date, type) {
                self.Events.push(ko.utils.extend({}, new EventObj(name, description, date, type)));
            }

            self.addEventType = function (text, value) {
                self.EventTypes.push({ text: text, value: value});
            }

            self.remove = function (row) {
                self.Events.remove(row);
            };
        };

        function EventObj(name, description, date, type) {
            var self = this;
            self.EventName = name;
            self.EventDescription = description;
            self.EventDate = date;
            self.EventType = type;
        };

        function GetField(id) {
            $.ajax({
                type: "GET",
                url: '/Field/Get',
                data: { id: id },
                dataType: "json",
                success: function (data) {
                    loadData(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    return null;
                }
            });
        }

        function loadData(data) {
            window.vm.FieldName(data.Name);
            for (var i = 0; i < data.Events.length; i++) {
                var e = data.Events[i];
                var formatedDate = new Date(parseInt(e.Date.slice(6, -2))).toLocaleDateString();
                window.vm.addEventObj(e.Name, e.Description, formatedDate, e.EventTypeId);
            }
        }

        function GetEventTypes() {
            $.ajax({
                type: "GET",
                url: '/EventType/GetAll',
                dataType: "json",
                success: function (data) {
                    loadEventTypes(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    return null;
                }
            });
        }

        function loadEventTypes(data) {
            for (var i = 0; i < data.length; i++) {
                var et = data[i];
                window.vm.addEventType(et.Name, et.EventTypeId);
            }
        }

        window.vm = new FieldViewModel();
        ko.applyBindings(vm);
    </script>
}
