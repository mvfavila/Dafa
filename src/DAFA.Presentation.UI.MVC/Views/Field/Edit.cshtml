@model DAFA.Application.ViewModels.FieldViewModel

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Field</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.FieldId, new { @data_bind = "value: FieldId" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", @data_bind = "value: FieldName" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <h4>Events</h4>

        <table id="events" class="table">
            <thead>
                <tr><th>Name</th><th>Description</th><th>Date</th><th>Type</th><th></th></tr>
            </thead>
            <tbody data-bind="foreach: Events">
                <tr class="clickable-row">
                    <td><input data-bind="value: Name" class="form-control" /></td>
                    <td><input data-bind="value: Description" class="form-control" /></td>
                    <td><input data-bind="value: Date" class="form-control" /></td>
                    <td>
                        <select class="form-control" data-bind="
                           options: $parent.EventTypes,
                           optionsText: 'text',
                           optionsValue: 'value',
                           value: EventTypeId,
                           valueAllowUnset: true"></select>
                    </td>
                    <td>
                        <button type="button" class="btn btn-danger" data-bind="click: $parent.remove">Remove</button>
                    </td>
                </tr>
            </tbody>
        </table>

        <div class="form-group">
            <div class="col-md-10">
                <button type="button" class="btn btn-primary" data-bind="click: addEvent">Add Event</button>
                <input type="button" value="Save" class="btn btn-default" data-bind="click: save" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/knockout")

    <script type="text/javascript">

        $('#events').on('click', '.clickable-row', function (event) {
            $(this).addClass('active').siblings().removeClass('active');
        });

        var FieldViewModel = function () {
            var self = this;

            self.FieldName = ko.observable();
            self.Events = ko.observableArray();
            self.EventTypes = ko.observableArray([]);
            self.ClientId = ko.observable();
            self.FieldId = ko.observable();

            GetField('@Model.FieldId');
            GetEventTypes();

            var field = {
                FieldId: '@Model.FieldId',
                Name: self.FieldName,
                Events: self.Events(),
                Active: '@Model.Active',
                ClientId: self.ClientId
            };

            self.save = function () {
                //console.log('Field');
                console.log(field);
                //console.log('=========');
                $.ajax({
                    type: "POST",
                    url: '/Field/Edit',
                    data: ko.toJS(field),
                    dataType: "json",
                    success: function (data) {
                        alert("Data Saved");
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        //console.log('Erro');
                        //console.log('XMLHttpRequest: ');
                        //console.log(XMLHttpRequest.responseText);
                        //console.log('textStatus: ' + textStatus);
                        //console.log('errorThrown: ' + errorThrown);
                        alert("some error");
                    }
                });
            };

            self.Name = "";
            self.Description = "";
            self.Date = "";
            self.EventTypeId = "";

            self.addEvent = function () {
                var eventId = uuidv4();
                self.Events.push(ko.utils.extend({},
                    new EventObj(eventId, self.Name, self.Description, self.Date, self.EventTypeId), self.FieldId));
            };

            self.addEventObj = function (eventId, name, description, date, type, fieldId) {
                self.Events.push(ko.utils.extend({}, new EventObj(eventId, name, description, date, type, fieldId)));
            }

            self.addEventType = function (text, value) {
                self.EventTypes.push({ text: text, value: value});
            }

            self.remove = function (row) {
                self.Events.remove(row);
            };
        };

        function EventObj(id, name, description, date, type, fieldId) {
            var self = this;
            self.EventId = id;
            self.Name = name;
            self.Description = description;
            self.Date = date;
            self.EventTypeId = type;
            self.FieldId = fieldId;
        };

        function GetField(id) {
            $.ajax({
                type: "GET",
                url: '/Field/Get',
                data: { id: id },
                dataType: "json",
                success: function (data) {
                    loadData(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    return null;
                }
            });
        }

        function loadData(data) {
            window.vm.FieldName(data.Name);
            window.vm.ClientId(data.ClientId);
            for (var i = 0; i < data.Events.length; i++) {
                var e = data.Events[i];
                var formatedDate = new Date(parseInt(e.Date.slice(6, -2))).toLocaleDateString();
                window.vm.addEventObj(e.EventId, e.Name, e.Description, formatedDate, e.EventTypeId, e.FieldId);
            }
        }

        function GetEventTypes() {
            $.ajax({
                type: "GET",
                url: '/EventType/GetAll',
                dataType: "json",
                success: function (data) {
                    loadEventTypes(data);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    return null;
                }
            });
        }

        function loadEventTypes(data) {
            for (var i = 0; i < data.length; i++) {
                var et = data[i];
                window.vm.addEventType(et.Name, et.EventTypeId);
            }
        }

        function uuidv4() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        window.vm = new FieldViewModel();
        ko.applyBindings(vm);
    </script>
}
